// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NSignalMinted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("graphAccount", Value.fromBytes(Bytes.empty()));
    this.set("subgraphNumber", Value.fromBigInt(BigInt.zero()));
    this.set("nameCurator", Value.fromBytes(Bytes.empty()));
    this.set("nSignalCreated", Value.fromBigInt(BigInt.zero()));
    this.set("vSignalCreated", Value.fromBigInt(BigInt.zero()));
    this.set("tokensDeposited", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NSignalMinted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NSignalMinted entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NSignalMinted", id.toString(), this);
    }
  }

  static load(id: string): NSignalMinted | null {
    return changetype<NSignalMinted | null>(store.get("NSignalMinted", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get graphAccount(): Bytes {
    let value = this.get("graphAccount");
    return value!.toBytes();
  }

  set graphAccount(value: Bytes) {
    this.set("graphAccount", Value.fromBytes(value));
  }

  get subgraphNumber(): BigInt {
    let value = this.get("subgraphNumber");
    return value!.toBigInt();
  }

  set subgraphNumber(value: BigInt) {
    this.set("subgraphNumber", Value.fromBigInt(value));
  }

  get nameCurator(): Bytes {
    let value = this.get("nameCurator");
    return value!.toBytes();
  }

  set nameCurator(value: Bytes) {
    this.set("nameCurator", Value.fromBytes(value));
  }

  get nSignalCreated(): BigInt {
    let value = this.get("nSignalCreated");
    return value!.toBigInt();
  }

  set nSignalCreated(value: BigInt) {
    this.set("nSignalCreated", Value.fromBigInt(value));
  }

  get vSignalCreated(): BigInt {
    let value = this.get("vSignalCreated");
    return value!.toBigInt();
  }

  set vSignalCreated(value: BigInt) {
    this.set("vSignalCreated", Value.fromBigInt(value));
  }

  get tokensDeposited(): BigInt {
    let value = this.get("tokensDeposited");
    return value!.toBigInt();
  }

  set tokensDeposited(value: BigInt) {
    this.set("tokensDeposited", Value.fromBigInt(value));
  }
}

export class NSignalBurned extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("graphAccount", Value.fromBytes(Bytes.empty()));
    this.set("subgraphNumber", Value.fromBigInt(BigInt.zero()));
    this.set("nameCurator", Value.fromBytes(Bytes.empty()));
    this.set("nSignalBurnt", Value.fromBigInt(BigInt.zero()));
    this.set("vSignalBurnt", Value.fromBigInt(BigInt.zero()));
    this.set("tokensReceived", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NSignalBurned entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NSignalBurned entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NSignalBurned", id.toString(), this);
    }
  }

  static load(id: string): NSignalBurned | null {
    return changetype<NSignalBurned | null>(store.get("NSignalBurned", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get graphAccount(): Bytes {
    let value = this.get("graphAccount");
    return value!.toBytes();
  }

  set graphAccount(value: Bytes) {
    this.set("graphAccount", Value.fromBytes(value));
  }

  get subgraphNumber(): BigInt {
    let value = this.get("subgraphNumber");
    return value!.toBigInt();
  }

  set subgraphNumber(value: BigInt) {
    this.set("subgraphNumber", Value.fromBigInt(value));
  }

  get nameCurator(): Bytes {
    let value = this.get("nameCurator");
    return value!.toBytes();
  }

  set nameCurator(value: Bytes) {
    this.set("nameCurator", Value.fromBytes(value));
  }

  get nSignalBurnt(): BigInt {
    let value = this.get("nSignalBurnt");
    return value!.toBigInt();
  }

  set nSignalBurnt(value: BigInt) {
    this.set("nSignalBurnt", Value.fromBigInt(value));
  }

  get vSignalBurnt(): BigInt {
    let value = this.get("vSignalBurnt");
    return value!.toBigInt();
  }

  set vSignalBurnt(value: BigInt) {
    this.set("vSignalBurnt", Value.fromBigInt(value));
  }

  get tokensReceived(): BigInt {
    let value = this.get("tokensReceived");
    return value!.toBigInt();
  }

  set tokensReceived(value: BigInt) {
    this.set("tokensReceived", Value.fromBigInt(value));
  }
}

export class GRTWithdrawn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("graphAccount", Value.fromBytes(Bytes.empty()));
    this.set("subgraphNumber", Value.fromBigInt(BigInt.zero()));
    this.set("nameCurator", Value.fromBytes(Bytes.empty()));
    this.set("nSignalBurnt", Value.fromBigInt(BigInt.zero()));
    this.set("withdrawnGRT", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GRTWithdrawn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GRTWithdrawn entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GRTWithdrawn", id.toString(), this);
    }
  }

  static load(id: string): GRTWithdrawn | null {
    return changetype<GRTWithdrawn | null>(store.get("GRTWithdrawn", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get graphAccount(): Bytes {
    let value = this.get("graphAccount");
    return value!.toBytes();
  }

  set graphAccount(value: Bytes) {
    this.set("graphAccount", Value.fromBytes(value));
  }

  get subgraphNumber(): BigInt {
    let value = this.get("subgraphNumber");
    return value!.toBigInt();
  }

  set subgraphNumber(value: BigInt) {
    this.set("subgraphNumber", Value.fromBigInt(value));
  }

  get nameCurator(): Bytes {
    let value = this.get("nameCurator");
    return value!.toBytes();
  }

  set nameCurator(value: Bytes) {
    this.set("nameCurator", Value.fromBytes(value));
  }

  get nSignalBurnt(): BigInt {
    let value = this.get("nSignalBurnt");
    return value!.toBigInt();
  }

  set nSignalBurnt(value: BigInt) {
    this.set("nSignalBurnt", Value.fromBigInt(value));
  }

  get withdrawnGRT(): BigInt {
    let value = this.get("withdrawnGRT");
    return value!.toBigInt();
  }

  set withdrawnGRT(value: BigInt) {
    this.set("withdrawnGRT", Value.fromBigInt(value));
  }
}

export class SubgraphDeprecated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("graphAccount", Value.fromBytes(Bytes.empty()));
    this.set("subgraphNumber", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubgraphDeprecated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SubgraphDeprecated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SubgraphDeprecated", id.toString(), this);
    }
  }

  static load(id: string): SubgraphDeprecated | null {
    return changetype<SubgraphDeprecated | null>(
      store.get("SubgraphDeprecated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get graphAccount(): Bytes {
    let value = this.get("graphAccount");
    return value!.toBytes();
  }

  set graphAccount(value: Bytes) {
    this.set("graphAccount", Value.fromBytes(value));
  }

  get subgraphNumber(): BigInt {
    let value = this.get("subgraphNumber");
    return value!.toBigInt();
  }

  set subgraphNumber(value: BigInt) {
    this.set("subgraphNumber", Value.fromBigInt(value));
  }
}

export class SubgraphMetadataUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("graphAccount", Value.fromBytes(Bytes.empty()));
    this.set("subgraphNumber", Value.fromBigInt(BigInt.zero()));
    this.set("subgraphMetadata", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SubgraphMetadataUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SubgraphMetadataUpdated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SubgraphMetadataUpdated", id.toString(), this);
    }
  }

  static load(id: string): SubgraphMetadataUpdated | null {
    return changetype<SubgraphMetadataUpdated | null>(
      store.get("SubgraphMetadataUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get graphAccount(): Bytes {
    let value = this.get("graphAccount");
    return value!.toBytes();
  }

  set graphAccount(value: Bytes) {
    this.set("graphAccount", Value.fromBytes(value));
  }

  get subgraphNumber(): BigInt {
    let value = this.get("subgraphNumber");
    return value!.toBigInt();
  }

  set subgraphNumber(value: BigInt) {
    this.set("subgraphNumber", Value.fromBigInt(value));
  }

  get subgraphMetadata(): Bytes {
    let value = this.get("subgraphMetadata");
    return value!.toBytes();
  }

  set subgraphMetadata(value: Bytes) {
    this.set("subgraphMetadata", Value.fromBytes(value));
  }
}

export class SubgraphPublished extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("graphAccount", Value.fromBytes(Bytes.empty()));
    this.set("subgraphNumber", Value.fromBigInt(BigInt.zero()));
    this.set("subgraphDeploymentID", Value.fromBytes(Bytes.empty()));
    this.set("versionMetadata", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubgraphPublished entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SubgraphPublished entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SubgraphPublished", id.toString(), this);
    }
  }

  static load(id: string): SubgraphPublished | null {
    return changetype<SubgraphPublished | null>(
      store.get("SubgraphPublished", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get graphAccount(): Bytes {
    let value = this.get("graphAccount");
    return value!.toBytes();
  }

  set graphAccount(value: Bytes) {
    this.set("graphAccount", Value.fromBytes(value));
  }

  get subgraphNumber(): BigInt {
    let value = this.get("subgraphNumber");
    return value!.toBigInt();
  }

  set subgraphNumber(value: BigInt) {
    this.set("subgraphNumber", Value.fromBigInt(value));
  }

  get subgraphDeploymentID(): Bytes {
    let value = this.get("subgraphDeploymentID");
    return value!.toBytes();
  }

  set subgraphDeploymentID(value: Bytes) {
    this.set("subgraphDeploymentID", Value.fromBytes(value));
  }

  get versionMetadata(): Bytes {
    let value = this.get("versionMetadata");
    return value!.toBytes();
  }

  set versionMetadata(value: Bytes) {
    this.set("versionMetadata", Value.fromBytes(value));
  }
}
