// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ContractSynced extends ethereum.Event {
  get params(): ContractSynced__Params {
    return new ContractSynced__Params(this);
  }
}

export class ContractSynced__Params {
  _event: ContractSynced;

  constructor(event: ContractSynced) {
    this._event = event;
  }

  get nameHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GRTWithdrawn extends ethereum.Event {
  get params(): GRTWithdrawn__Params {
    return new GRTWithdrawn__Params(this);
  }
}

export class GRTWithdrawn__Params {
  _event: GRTWithdrawn;

  constructor(event: GRTWithdrawn) {
    this._event = event;
  }

  get graphAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nameCurator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nSignalBurnt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get withdrawnGRT(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NSignalBurned extends ethereum.Event {
  get params(): NSignalBurned__Params {
    return new NSignalBurned__Params(this);
  }
}

export class NSignalBurned__Params {
  _event: NSignalBurned;

  constructor(event: NSignalBurned) {
    this._event = event;
  }

  get graphAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nameCurator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nSignalBurnt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get vSignalBurnt(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get tokensReceived(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class NSignalMinted extends ethereum.Event {
  get params(): NSignalMinted__Params {
    return new NSignalMinted__Params(this);
  }
}

export class NSignalMinted__Params {
  _event: NSignalMinted;

  constructor(event: NSignalMinted) {
    this._event = event;
  }

  get graphAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nameCurator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nSignalCreated(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get vSignalCreated(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get tokensDeposited(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class NameSignalDisabled extends ethereum.Event {
  get params(): NameSignalDisabled__Params {
    return new NameSignalDisabled__Params(this);
  }
}

export class NameSignalDisabled__Params {
  _event: NameSignalDisabled;

  constructor(event: NameSignalDisabled) {
    this._event = event;
  }

  get graphAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get withdrawableGRT(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NameSignalEnabled extends ethereum.Event {
  get params(): NameSignalEnabled__Params {
    return new NameSignalEnabled__Params(this);
  }
}

export class NameSignalEnabled__Params {
  _event: NameSignalEnabled;

  constructor(event: NameSignalEnabled) {
    this._event = event;
  }

  get graphAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get reserveRatio(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NameSignalUpgrade extends ethereum.Event {
  get params(): NameSignalUpgrade__Params {
    return new NameSignalUpgrade__Params(this);
  }
}

export class NameSignalUpgrade__Params {
  _event: NameSignalUpgrade;

  constructor(event: NameSignalUpgrade) {
    this._event = event;
  }

  get graphAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newVSignalCreated(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokensSignalled(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class ParameterUpdated extends ethereum.Event {
  get params(): ParameterUpdated__Params {
    return new ParameterUpdated__Params(this);
  }
}

export class ParameterUpdated__Params {
  _event: ParameterUpdated;

  constructor(event: ParameterUpdated) {
    this._event = event;
  }

  get param(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class SetController extends ethereum.Event {
  get params(): SetController__Params {
    return new SetController__Params(this);
  }
}

export class SetController__Params {
  _event: SetController;

  constructor(event: SetController) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetDefaultName extends ethereum.Event {
  get params(): SetDefaultName__Params {
    return new SetDefaultName__Params(this);
  }
}

export class SetDefaultName__Params {
  _event: SetDefaultName;

  constructor(event: SetDefaultName) {
    this._event = event;
  }

  get graphAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nameSystem(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nameIdentifier(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class SubgraphDeprecated extends ethereum.Event {
  get params(): SubgraphDeprecated__Params {
    return new SubgraphDeprecated__Params(this);
  }
}

export class SubgraphDeprecated__Params {
  _event: SubgraphDeprecated;

  constructor(event: SubgraphDeprecated) {
    this._event = event;
  }

  get graphAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SubgraphMetadataUpdated extends ethereum.Event {
  get params(): SubgraphMetadataUpdated__Params {
    return new SubgraphMetadataUpdated__Params(this);
  }
}

export class SubgraphMetadataUpdated__Params {
  _event: SubgraphMetadataUpdated;

  constructor(event: SubgraphMetadataUpdated) {
    this._event = event;
  }

  get graphAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get subgraphMetadata(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class SubgraphPublished extends ethereum.Event {
  get params(): SubgraphPublished__Params {
    return new SubgraphPublished__Params(this);
  }
}

export class SubgraphPublished__Params {
  _event: SubgraphPublished;

  constructor(event: SubgraphPublished) {
    this._event = event;
  }

  get graphAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get versionMetadata(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class GNS__nSignalToTokensResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GNS__nameSignalsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;
  value3: BigInt;
  value4: boolean;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Bytes,
    value3: BigInt,
    value4: boolean,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class GNS__tokensToNSignalResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GNS extends ethereum.SmartContract {
  static bind(address: Address): GNS {
    return new GNS("GNS", address);
  }

  bondingCurve(): Address {
    let result = super.call("bondingCurve", "bondingCurve():(address)", []);

    return result[0].toAddress();
  }

  try_bondingCurve(): ethereum.CallResult<Address> {
    let result = super.tryCall("bondingCurve", "bondingCurve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  erc1056Registry(): Address {
    let result = super.call(
      "erc1056Registry",
      "erc1056Registry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_erc1056Registry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "erc1056Registry",
      "erc1056Registry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCuratorNSignal(
    _graphAccount: Address,
    _subgraphNumber: BigInt,
    _curator: Address
  ): BigInt {
    let result = super.call(
      "getCuratorNSignal",
      "getCuratorNSignal(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_graphAccount),
        ethereum.Value.fromUnsignedBigInt(_subgraphNumber),
        ethereum.Value.fromAddress(_curator)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCuratorNSignal(
    _graphAccount: Address,
    _subgraphNumber: BigInt,
    _curator: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCuratorNSignal",
      "getCuratorNSignal(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_graphAccount),
        ethereum.Value.fromUnsignedBigInt(_subgraphNumber),
        ethereum.Value.fromAddress(_curator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  graphAccountSubgraphNumbers(param0: Address): BigInt {
    let result = super.call(
      "graphAccountSubgraphNumbers",
      "graphAccountSubgraphNumbers(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_graphAccountSubgraphNumbers(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "graphAccountSubgraphNumbers",
      "graphAccountSubgraphNumbers(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isPublished(_graphAccount: Address, _subgraphNumber: BigInt): boolean {
    let result = super.call(
      "isPublished",
      "isPublished(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_graphAccount),
        ethereum.Value.fromUnsignedBigInt(_subgraphNumber)
      ]
    );

    return result[0].toBoolean();
  }

  try_isPublished(
    _graphAccount: Address,
    _subgraphNumber: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPublished",
      "isPublished(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_graphAccount),
        ethereum.Value.fromUnsignedBigInt(_subgraphNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  nSignalToTokens(
    _graphAccount: Address,
    _subgraphNumber: BigInt,
    _nSignalIn: BigInt
  ): GNS__nSignalToTokensResult {
    let result = super.call(
      "nSignalToTokens",
      "nSignalToTokens(address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_graphAccount),
        ethereum.Value.fromUnsignedBigInt(_subgraphNumber),
        ethereum.Value.fromUnsignedBigInt(_nSignalIn)
      ]
    );

    return new GNS__nSignalToTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_nSignalToTokens(
    _graphAccount: Address,
    _subgraphNumber: BigInt,
    _nSignalIn: BigInt
  ): ethereum.CallResult<GNS__nSignalToTokensResult> {
    let result = super.tryCall(
      "nSignalToTokens",
      "nSignalToTokens(address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_graphAccount),
        ethereum.Value.fromUnsignedBigInt(_subgraphNumber),
        ethereum.Value.fromUnsignedBigInt(_nSignalIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GNS__nSignalToTokensResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  nSignalToVSignal(
    _graphAccount: Address,
    _subgraphNumber: BigInt,
    _nSignalIn: BigInt
  ): BigInt {
    let result = super.call(
      "nSignalToVSignal",
      "nSignalToVSignal(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_graphAccount),
        ethereum.Value.fromUnsignedBigInt(_subgraphNumber),
        ethereum.Value.fromUnsignedBigInt(_nSignalIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_nSignalToVSignal(
    _graphAccount: Address,
    _subgraphNumber: BigInt,
    _nSignalIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nSignalToVSignal",
      "nSignalToVSignal(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_graphAccount),
        ethereum.Value.fromUnsignedBigInt(_subgraphNumber),
        ethereum.Value.fromUnsignedBigInt(_nSignalIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nameSignals(param0: Address, param1: BigInt): GNS__nameSignalsResult {
    let result = super.call(
      "nameSignals",
      "nameSignals(address,uint256):(uint256,uint256,bytes32,uint32,bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new GNS__nameSignalsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBigInt()
    );
  }

  try_nameSignals(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<GNS__nameSignalsResult> {
    let result = super.tryCall(
      "nameSignals",
      "nameSignals(address,uint256):(uint256,uint256,bytes32,uint32,bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GNS__nameSignalsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBigInt()
      )
    );
  }

  ownerTaxPercentage(): BigInt {
    let result = super.call(
      "ownerTaxPercentage",
      "ownerTaxPercentage():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_ownerTaxPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerTaxPercentage",
      "ownerTaxPercentage():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subgraphs(param0: Address, param1: BigInt): Bytes {
    let result = super.call(
      "subgraphs",
      "subgraphs(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_subgraphs(param0: Address, param1: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "subgraphs",
      "subgraphs(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tokensToNSignal(
    _graphAccount: Address,
    _subgraphNumber: BigInt,
    _tokensIn: BigInt
  ): GNS__tokensToNSignalResult {
    let result = super.call(
      "tokensToNSignal",
      "tokensToNSignal(address,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_graphAccount),
        ethereum.Value.fromUnsignedBigInt(_subgraphNumber),
        ethereum.Value.fromUnsignedBigInt(_tokensIn)
      ]
    );

    return new GNS__tokensToNSignalResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_tokensToNSignal(
    _graphAccount: Address,
    _subgraphNumber: BigInt,
    _tokensIn: BigInt
  ): ethereum.CallResult<GNS__tokensToNSignalResult> {
    let result = super.tryCall(
      "tokensToNSignal",
      "tokensToNSignal(address,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_graphAccount),
        ethereum.Value.fromUnsignedBigInt(_subgraphNumber),
        ethereum.Value.fromUnsignedBigInt(_tokensIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GNS__tokensToNSignalResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  vSignalToNSignal(
    _graphAccount: Address,
    _subgraphNumber: BigInt,
    _vSignalIn: BigInt
  ): BigInt {
    let result = super.call(
      "vSignalToNSignal",
      "vSignalToNSignal(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_graphAccount),
        ethereum.Value.fromUnsignedBigInt(_subgraphNumber),
        ethereum.Value.fromUnsignedBigInt(_vSignalIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_vSignalToNSignal(
    _graphAccount: Address,
    _subgraphNumber: BigInt,
    _vSignalIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vSignalToNSignal",
      "vSignalToNSignal(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_graphAccount),
        ethereum.Value.fromUnsignedBigInt(_subgraphNumber),
        ethereum.Value.fromUnsignedBigInt(_vSignalIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AcceptProxyCall extends ethereum.Call {
  get inputs(): AcceptProxyCall__Inputs {
    return new AcceptProxyCall__Inputs(this);
  }

  get outputs(): AcceptProxyCall__Outputs {
    return new AcceptProxyCall__Outputs(this);
  }
}

export class AcceptProxyCall__Inputs {
  _call: AcceptProxyCall;

  constructor(call: AcceptProxyCall) {
    this._call = call;
  }

  get _proxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptProxyCall__Outputs {
  _call: AcceptProxyCall;

  constructor(call: AcceptProxyCall) {
    this._call = call;
  }
}

export class AcceptProxyAndCallCall extends ethereum.Call {
  get inputs(): AcceptProxyAndCallCall__Inputs {
    return new AcceptProxyAndCallCall__Inputs(this);
  }

  get outputs(): AcceptProxyAndCallCall__Outputs {
    return new AcceptProxyAndCallCall__Outputs(this);
  }
}

export class AcceptProxyAndCallCall__Inputs {
  _call: AcceptProxyAndCallCall;

  constructor(call: AcceptProxyAndCallCall) {
    this._call = call;
  }

  get _proxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AcceptProxyAndCallCall__Outputs {
  _call: AcceptProxyAndCallCall;

  constructor(call: AcceptProxyAndCallCall) {
    this._call = call;
  }
}

export class ApproveAllCall extends ethereum.Call {
  get inputs(): ApproveAllCall__Inputs {
    return new ApproveAllCall__Inputs(this);
  }

  get outputs(): ApproveAllCall__Outputs {
    return new ApproveAllCall__Outputs(this);
  }
}

export class ApproveAllCall__Inputs {
  _call: ApproveAllCall;

  constructor(call: ApproveAllCall) {
    this._call = call;
  }
}

export class ApproveAllCall__Outputs {
  _call: ApproveAllCall;

  constructor(call: ApproveAllCall) {
    this._call = call;
  }
}

export class BurnNSignalCall extends ethereum.Call {
  get inputs(): BurnNSignalCall__Inputs {
    return new BurnNSignalCall__Inputs(this);
  }

  get outputs(): BurnNSignalCall__Outputs {
    return new BurnNSignalCall__Outputs(this);
  }
}

export class BurnNSignalCall__Inputs {
  _call: BurnNSignalCall;

  constructor(call: BurnNSignalCall) {
    this._call = call;
  }

  get _graphAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subgraphNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _nSignal(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tokensOutMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BurnNSignalCall__Outputs {
  _call: BurnNSignalCall;

  constructor(call: BurnNSignalCall) {
    this._call = call;
  }
}

export class DeprecateSubgraphCall extends ethereum.Call {
  get inputs(): DeprecateSubgraphCall__Inputs {
    return new DeprecateSubgraphCall__Inputs(this);
  }

  get outputs(): DeprecateSubgraphCall__Outputs {
    return new DeprecateSubgraphCall__Outputs(this);
  }
}

export class DeprecateSubgraphCall__Inputs {
  _call: DeprecateSubgraphCall;

  constructor(call: DeprecateSubgraphCall) {
    this._call = call;
  }

  get _graphAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subgraphNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DeprecateSubgraphCall__Outputs {
  _call: DeprecateSubgraphCall;

  constructor(call: DeprecateSubgraphCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bondingCurve(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _didRegistry(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintNSignalCall extends ethereum.Call {
  get inputs(): MintNSignalCall__Inputs {
    return new MintNSignalCall__Inputs(this);
  }

  get outputs(): MintNSignalCall__Outputs {
    return new MintNSignalCall__Outputs(this);
  }
}

export class MintNSignalCall__Inputs {
  _call: MintNSignalCall;

  constructor(call: MintNSignalCall) {
    this._call = call;
  }

  get _graphAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subgraphNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokensIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _nSignalOutMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintNSignalCall__Outputs {
  _call: MintNSignalCall;

  constructor(call: MintNSignalCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class PublishNewSubgraphCall extends ethereum.Call {
  get inputs(): PublishNewSubgraphCall__Inputs {
    return new PublishNewSubgraphCall__Inputs(this);
  }

  get outputs(): PublishNewSubgraphCall__Outputs {
    return new PublishNewSubgraphCall__Outputs(this);
  }
}

export class PublishNewSubgraphCall__Inputs {
  _call: PublishNewSubgraphCall;

  constructor(call: PublishNewSubgraphCall) {
    this._call = call;
  }

  get _graphAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _versionMetadata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _subgraphMetadata(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class PublishNewSubgraphCall__Outputs {
  _call: PublishNewSubgraphCall;

  constructor(call: PublishNewSubgraphCall) {
    this._call = call;
  }
}

export class PublishNewVersionCall extends ethereum.Call {
  get inputs(): PublishNewVersionCall__Inputs {
    return new PublishNewVersionCall__Inputs(this);
  }

  get outputs(): PublishNewVersionCall__Outputs {
    return new PublishNewVersionCall__Outputs(this);
  }
}

export class PublishNewVersionCall__Inputs {
  _call: PublishNewVersionCall;

  constructor(call: PublishNewVersionCall) {
    this._call = call;
  }

  get _graphAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subgraphNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _versionMetadata(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class PublishNewVersionCall__Outputs {
  _call: PublishNewVersionCall;

  constructor(call: PublishNewVersionCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetDefaultNameCall extends ethereum.Call {
  get inputs(): SetDefaultNameCall__Inputs {
    return new SetDefaultNameCall__Inputs(this);
  }

  get outputs(): SetDefaultNameCall__Outputs {
    return new SetDefaultNameCall__Outputs(this);
  }
}

export class SetDefaultNameCall__Inputs {
  _call: SetDefaultNameCall;

  constructor(call: SetDefaultNameCall) {
    this._call = call;
  }

  get _graphAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nameSystem(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _nameIdentifier(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _name(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class SetDefaultNameCall__Outputs {
  _call: SetDefaultNameCall;

  constructor(call: SetDefaultNameCall) {
    this._call = call;
  }
}

export class SetOwnerTaxPercentageCall extends ethereum.Call {
  get inputs(): SetOwnerTaxPercentageCall__Inputs {
    return new SetOwnerTaxPercentageCall__Inputs(this);
  }

  get outputs(): SetOwnerTaxPercentageCall__Outputs {
    return new SetOwnerTaxPercentageCall__Outputs(this);
  }
}

export class SetOwnerTaxPercentageCall__Inputs {
  _call: SetOwnerTaxPercentageCall;

  constructor(call: SetOwnerTaxPercentageCall) {
    this._call = call;
  }

  get _ownerTaxPercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetOwnerTaxPercentageCall__Outputs {
  _call: SetOwnerTaxPercentageCall;

  constructor(call: SetOwnerTaxPercentageCall) {
    this._call = call;
  }
}

export class SyncAllContractsCall extends ethereum.Call {
  get inputs(): SyncAllContractsCall__Inputs {
    return new SyncAllContractsCall__Inputs(this);
  }

  get outputs(): SyncAllContractsCall__Outputs {
    return new SyncAllContractsCall__Outputs(this);
  }
}

export class SyncAllContractsCall__Inputs {
  _call: SyncAllContractsCall;

  constructor(call: SyncAllContractsCall) {
    this._call = call;
  }
}

export class SyncAllContractsCall__Outputs {
  _call: SyncAllContractsCall;

  constructor(call: SyncAllContractsCall) {
    this._call = call;
  }
}

export class UpdateSubgraphMetadataCall extends ethereum.Call {
  get inputs(): UpdateSubgraphMetadataCall__Inputs {
    return new UpdateSubgraphMetadataCall__Inputs(this);
  }

  get outputs(): UpdateSubgraphMetadataCall__Outputs {
    return new UpdateSubgraphMetadataCall__Outputs(this);
  }
}

export class UpdateSubgraphMetadataCall__Inputs {
  _call: UpdateSubgraphMetadataCall;

  constructor(call: UpdateSubgraphMetadataCall) {
    this._call = call;
  }

  get _graphAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subgraphNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _subgraphMetadata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UpdateSubgraphMetadataCall__Outputs {
  _call: UpdateSubgraphMetadataCall;

  constructor(call: UpdateSubgraphMetadataCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _graphAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subgraphNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
